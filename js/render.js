Handlebars.registerHelper("ifEquals", function (arg1, arg2, options) {
	return arg1 == arg2 ? options.fn(this) : options.inverse(this);
});

Handlebars.registerHelper("ifIncludes", function (arg1, arg2, options) {
	return arg1 && arg1.includes(arg2) ? options.fn(this) : options.inverse(this);
});

var featureTemplate = Handlebars.compile(`
	<div class="feature">
		<a name="{{tag}}"><h2> {{tag}}: {{feature.title}} </h2></a>

		{{#ifEquals feature.state "required"}}
			<div class="tooltip" data-text="Required feature: It's on, and you can't turn it off.">
			<span class="material-icons-outlined">check_circle</span>
			</div>
		{{/ifEquals}}

		{{#ifEquals feature.state "discretionary"}}
			<div class="tooltip" data-text="Discretionary feature: It's off, but can turn it on.">
			<span class="material-icons-outlined">toggle_off</span>
			</div>
		{{/ifEquals}}

		{{#ifEquals feature.state "default"}}
			<div class="tooltip" data-text="Default feature: It's on, but can turn it off.">
			<span class="material-icons-outlined">toggle_on</span>
			</div>
		{{/ifEquals}}

		{{#if feature.automatic}}
			<div class="tooltip" data-text="This feature is usually generated by your font editor.">
			<span class="material-icons-outlined">smart_toy</span>
			</div>
		{{/if}}

		{{#if feature.popularity_ix}}
			<div class="tooltip" data-text="This feature is {{feature.popularity}}.">
			{{{feature.stars}}}
			</div>
		{{else}}
			<div class="tooltip" data-text="This feature is {{feature.popularity}}.">
			<span class="material-icons-outlined">star_outline</span>
			</div>
		{{/if}}

		{{#if feature.script}}
			{{{feature.html_scripts}}}
		{{else}}
		<div class="tooltip" data-text="This feature applies to all scripts.">
			<span class="material-icons-outlined">public</span>
			</div>
		{{/if}}


		{{#ifEquals feature.status "deprecated"}}
			<div class="tooltip" data-text="This feature is deprecated.">
			<span class="material-icons-outlined">sick</span>
			</div>
		{{/ifEquals}}

		{{#ifEquals feature.status "discouraged"}}
			<div class="tooltip" data-text="This feature is discouraged.">
			<span class="material-icons-outlined">sentiment_dissatisfied</span>
			</div>
		{{/ifEquals}}


		{{#ifEquals feature.registered "Microsoft"}}
		<div class="tooltip" data-text="This feature was registered by Microsoft.">
			<span class="material-icons-outlined microsoft">window</span>
			</div>
		{{/ifEquals}}

		{{#ifEquals feature.registered "Adobe"}}
		<div class="tooltip" data-text="This feature was registered by Adobe.">
			<span class="adobe">A</span>
		</div>
		{{/ifEquals}}

		{{#ifIncludes feature.registered "Tiro"}}
		<div class="tooltip" data-text="This feature was registered by Tiro Typeworks.">
			<span class="tiro">T</span>
		</div>
		{{/ifIncludes}}

		{{#ifIncludes feature.registered "W3C"}}
		<div class="tooltip" data-text="This feature was registered by the W3C.">
			<span class="w3c">W</span>
		</div>
		{{/ifIncludes}}

		{{{ feature.html_description }}}

		{{#if feature.example}}
		{{#if feature.example.math}}
		<details open>
				<summary>Example</summary>
	  <div class="row">
	  <div class="five columns">
	  	Off:
			<span class="example-off" style="font-feature-settings: '{{tag}}' 0;">
	      <math xmlns="http://www.w3.org/1998/Math/MathML">
	         <mrow>
						{{{feature.example.math}}}
						</mrow>
				</math>
			</span>
		</div>

	  <div class="five columns">
	  	On:
			<span class="example-on">
	      <math xmlns="http://www.w3.org/1998/Math/MathML">
	         <mrow>
						{{{feature.example.math}}}
						</mrow>
				</math>
			</span>
		</div>
		</div>
			<div class="warning"> The above example contains MathML, which currently
			only renders reliably using Firefox.</div>
		</details>
		{{else}}
		<details open>
				<summary>Example</summary>
	  <div class="row">
	  <div class="five columns">
	  	Off:
			<span class="example-off" style="font-family: '{{feature.example.font}}'; font-feature-settings: '{{tag}}' 0;">
				{{feature.example.text}}
			</span>
		</div>

	  <div class="five columns">
	  	On:
			<span class="example-on" style="font-family: '{{feature.example.font}}'; font-feature-settings: '{{tag}}' 1;">
				{{feature.example.text}}
			</span>
		</div>
		</div>

		{{#ifEquals feature.state "required"}}
		{{#if safari}}
			<div class="warning"> Safari does not allow required features to be turned off,
			so this example may not show any distinction between the "off" and "on" state.
			Try viewing this example in Firefox or Chrome instead.</div>
		{{/if}}
		{{/ifEquals}}

		</details>

		{{/if}}
		{{/if}}

		{{#if feature.fea}}
			<details open>
				<summary>Example Feature Code Implementation</summary>
				<pre><code class="language-fea">{{feature.fea}}</code></pre>
			</details>
		{{/if}}

		{{#if feature.ui}}
			<details open>
			<summary>User-Interface expectations</summary>
			<div class="ui">
				{{{feature.html_ui}}}
			</div>
			</details>
		{{/if}}

		<dl>
			{{#if feature.group}}
			<dt>Group:</dt><dd>{{feature.group}}</dd>
			{{/if}}
		</dl>

	</div>
`);

var phases = [
	"Preprocessing",
	"Orthographic",
	"Topographical",
	"Typographic",
	"Positioning",
	"Common",
	"Discretionary",
];

function filterPhase(phasefilter) {
	return (tag) => {
		feat = window.featuredb[tag];
		if (phasefilter == "Discretionary") {
			return !feat.group;
		} else {
			return feat.group == phasefilter;
		}
	};
}

function renderAll() {
	$("#features").empty();
	console.log("Rendering");
	var tagfilter = $("#tag-filter").val();
	var phasefilter = $("#phase-filter").val();
	var scriptfilter = $("#script-filter").val();
	tags = Object.keys(window.featuredb);

	tags.sort();

	if (tagfilter) {
		tags = tags.filter((x) => x.includes(tagfilter));
	}

	if (phasefilter) {
		tags = tags.filter(filterPhase(phasefilter));
	}

	if (scriptfilter) {
		tags = tags.filter((tag) => {
			feat = window.featuredb[tag];
			scripts = expandScript(Object.keys(feat.script || {}));
			return scripts.length == 0 || scripts.includes(scriptfilter);
		});

		var isindic = scripts_db[scriptfilter].indic;
		var isuse = scripts_db[scriptfilter].use;

		$("#features").append(
			$(
				`<div class="inorder"> Features are listed in the order of processing for this script</div>`
			)
		);

		tags.sort((a, b) => {
			var feat1 = window.featuredb[a];
			var feat2 = window.featuredb[b];

			var phase1 = phases.indexOf(feat1.group);
			var phase2 = phases.indexOf(feat2.group);
			if (phase1 != phase2) {
				return phase1 > phase2;
			}

			var script_order1;
			var script_order2;
			if (isindic) {
				script_order1 = feat1.script["INDIC"].order;
				script_order2 = feat2.script["INDIC"].order;
			} else if (isuse) {
				script_order1 = feat1.script["USE"].order;
				script_order2 = feat2.script["USE"].order;
			} else if (feat1.script && feat2.script) {
				script_order1 = feat1.script[scriptfilter].order;
				script_order2 = feat2.script[scriptfilter].order;
			}
			if (script_order1 != script_order2) {
				return script_order1 > script_order2;
			}
			return a > b;
		});
	} else {
		$("#features").append(
			$(
				`<div class="inorder"> Features are listed in alphabetical order. Select a script to list features in order of processing.</div>`
			)
		);
	}
	if (scriptfilter && !phasefilter) {
		for (phase of phases) {
			$("#features").append($(`<h2>${phase} Phase</h2>`));
			var thesetags = tags.filter(filterPhase(phase));
			for (tag of thesetags) {
				renderOne(tag);
			}
		}
	} else {
		for (tag of tags) {
			renderOne(tag);
		}
	}
}

function renderOne(tag) {
	feat = window.featuredb[tag];

	if (!feat.html_scripts) {
		feat.html_scripts = scriptsFor(feat);
	}

	if (!feat.stars) {
		feat.stars = `<span class="material-icons-outlined">star</span>`.repeat(
			feat.popularity_ix
		);
	}

	if (!feat.html_description) {
		feat.html_description = marked(feat.description);
	}

	if (!feat.html_ui && feat.ui) {
		feat.html_ui = marked(feat.ui);
	}

	var featurediv = $(
		featureTemplate({ tag: tag, feature: feat, safari: window.safari })
	);
	$("#features").append(featurediv);
}

$(function () {
	fillScriptsFilter();
	renderAll();
	console.log($("#tag-filter"));
	$("#tag-filter,#script-filter, #phase-filter").on(
		"change keyup paste",
		function () {
			renderAll();
		}
	);
});
